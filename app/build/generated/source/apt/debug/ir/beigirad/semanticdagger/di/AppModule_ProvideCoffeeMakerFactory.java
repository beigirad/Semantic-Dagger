// Generated by Dagger (https://google.github.io/dagger).
package ir.beigirad.semanticdagger.di;

import android.content.Context;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import ir.beigirad.semanticdagger.model.CoffeeMaker;
import ir.beigirad.semanticdagger.model.Heater;
import ir.beigirad.semanticdagger.model.Pump;
import javax.inject.Provider;

public final class AppModule_ProvideCoffeeMakerFactory implements Factory<CoffeeMaker> {
  private final AppModule module;

  private final Provider<Heater> heaterProvider;

  private final Provider<Pump> pumpProvider;

  private final Provider<Context> contextProvider;

  public AppModule_ProvideCoffeeMakerFactory(
      AppModule module,
      Provider<Heater> heaterProvider,
      Provider<Pump> pumpProvider,
      Provider<Context> contextProvider) {
    this.module = module;
    this.heaterProvider = heaterProvider;
    this.pumpProvider = pumpProvider;
    this.contextProvider = contextProvider;
  }

  @Override
  public CoffeeMaker get() {
    return provideCoffeeMaker(
        module, heaterProvider.get(), pumpProvider.get(), contextProvider.get());
  }

  public static AppModule_ProvideCoffeeMakerFactory create(
      AppModule module,
      Provider<Heater> heaterProvider,
      Provider<Pump> pumpProvider,
      Provider<Context> contextProvider) {
    return new AppModule_ProvideCoffeeMakerFactory(
        module, heaterProvider, pumpProvider, contextProvider);
  }

  public static CoffeeMaker provideCoffeeMaker(
      AppModule instance, Heater heater, Pump pump, Context context) {
    return Preconditions.checkNotNull(
        instance.provideCoffeeMaker(heater, pump, context),
        "Cannot return null from a non-@Nullable @Provides method");
  }
}
