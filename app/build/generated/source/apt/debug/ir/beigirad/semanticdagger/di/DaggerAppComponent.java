// Generated by Dagger (https://google.github.io/dagger).
package ir.beigirad.semanticdagger.di;

import android.content.Context;
import dagger.internal.Preconditions;
import ir.beigirad.semanticdagger.MainActivity;
import ir.beigirad.semanticdagger.MainActivity_MembersInjector;
import ir.beigirad.semanticdagger.model.CoffeeMaker;
import ir.beigirad.semanticdagger.model.ElectricHeater;
import ir.beigirad.semanticdagger.model.Pump;

public final class DaggerAppComponent extends AppComponent {
  private final Context builderContext;

  private final AppModule appModule;

  private DaggerAppComponent(AppModule appModuleParam, Context builderContextParam) {
    this.builderContext = builderContextParam;
    this.appModule = appModuleParam;
  }

  public static AppComponent.AppComponentBuilder builder() {
    return new Builder();
  }

  private CoffeeMaker getCoffeeMaker() {
    return AppModule_ProvideCoffeeMakerFactory.provideCoffeeMaker(
        appModule, new ElectricHeater(), new Pump(), builderContext);
  }

  @Override
  public void inject(MainActivity mainActivity) {
    injectMainActivity(mainActivity);
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectMCoffeeMaker(instance, getCoffeeMaker());
    return instance;
  }

  private static final class Builder implements AppComponent.AppComponentBuilder {
    private Context builderContext;

    @Override
    public Builder builderContext(Context context) {
      this.builderContext = Preconditions.checkNotNull(context);
      return this;
    }

    @Override
    public AppComponent buildAppComponent() {
      Preconditions.checkBuilderRequirement(builderContext, Context.class);
      return new DaggerAppComponent(new AppModule(), builderContext);
    }
  }
}
